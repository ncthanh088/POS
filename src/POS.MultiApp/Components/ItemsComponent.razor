@inject IItemService ItemService
@inject ICartService CartService

<article id="products">
    <div class="px-6">
        <hr class="border-1 w-full border-gray-700">
    </div>
    <div class="grid-cols-4 grid gap-3 py-3 pr-6">
        @if (items?.Count() > 0)
        {
            @foreach (var item in items)
            {
                var cartItem = new CartItem
                    {
                        Id = item.Id,
                        Name = item.Name,
                        UnitPrice = item.Price,
                        ItemId = item.Id,
                    };
                var backgroundSize = cartItem.Quantity > 0 ? "" : "3%";
                <div class="-bg--bg-black2 relative min-h-28 w-full overflow-hidden rounded-md text-gray-300">
                    <div class="absolute left-0 top-0 h-full"
                         style="background-color: @Category.Color; width: @backgroundSize;">
                    </div>
                    <div class="z-1 flex min-h-28 w-auto flex-col items-start justify-between p-3 text-sm">
                        <div>
                            <h2 class="text-[0.5rem]">
                                @Category.Name &rarr;
                                <span>Sale</span>
                            </h2>
                            <h3 class="text-[0.7rem] font-normal">@cartItem.Name</h3>
                            <h4 class="text-[0.6rem]">$@cartItem.UnitPrice</h4>
                        </div>
                        <div class="-text--grey flex w-full justify-end">
                            <AddCartItemComponent CartItem="cartItem" OnQuantityChanged="HandleQuantityChanged" />
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <h2 class="mt-2 text-sm text-gray-400">There are currently no products for sale.</h2>
        }
    </div>
</article>


@code {

    [Parameter]
    public Category Category { get; set; }
    private IEnumerable<Item> items;

    protected override async Task OnInitializedAsync()
    {
        items = await ItemService.GetItemsByCategoryIdAsync(Category.Id);
    }

    protected override async Task OnParametersSetAsync()
    {
        items = await ItemService.GetItemsByCategoryIdAsync(Category.Id);
    }

    protected override void OnInitialized()
    {
        // ItemService.OnChange += StateHasChanged;
    }

    private Task HandleQuantityChanged(CartItem cartItem)
    {
    // TODO: Sync background color with item Quantity.
        @* style="background-color: @Category.Color; width: @(quantity > 0 ? "100%" : "3%") *@
        return Task.CompletedTask;
    }
}
