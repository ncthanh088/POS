@inject IProductService productService
@inject ICartService cartService
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<article id="products">
    <div class=" px-6">
        <hr class="border-gray-700 border-1 w-full">
    </div>
    <ul class="grid grid-cols-4 gap-3 px-6 py-3">
        @if (products?.Count() > 0)
        {
            @foreach (var product in products)
            {
                var item = new Item
                    {
                        Id = product.Id,
                        Name = product.Name,
                        UnitPrice = product.Price,
                        ProductId = product.Id,
                    };
                <div class="relative rounded-md min-h-28 w-full overflow-hidden -bg--bg-black2 text-gray-300">
                    <div class="absolute h-full top-0 left-0 ">
                    </div>
                    <div class="p-3 flex flex-col justify-between  items-start text-sm min-h-28 w-auto z-1">
                        <div>
                            <h2 class="text-[0.5rem]">@Category.Name &rarr;
                                <span>Sale</span>
                            </h2>
                            <h3 class="text-[0.7rem]  font-normal">@item.Name</h3>
                            <h4 class="text-[0.6rem]">$@item.UnitPrice</h4>
                        </div>
                        <div class="w-full flex justify-end -text--grey">
                            <ItemInputComponent Item="item" OnQuantityChanged="HandleQuantityChanged" />
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <h2 class="text-gray-400 text-sm mt-2">There are currently no products for sale.</h2>
        }
    </ul>
</article>


@code {

    [Parameter]
    public Category Category { get; set; }

    [Inject]
    public IProductService ProductService { get; set; }

    private IEnumerable<Product> products;

    protected override async Task OnInitializedAsync()
    {
        products = await ProductService.GetProductsByCategoryIdAsync(Category.Id);
    }

    protected override async Task OnParametersSetAsync()
    {
        products = await ProductService.GetProductsByCategoryIdAsync(Category.Id);
    }

    protected override void OnInitialized()
    {
        productService.OnChange += StateHasChanged;
    }

    private Task HandleQuantityChanged(Item item)
    {
        // TODO: Sync background color with item Quantity.
        @* style="background-color: @Category.Color; width: @(quantity > 0 ? "100%" : "3%") *@
        return Task.CompletedTask;
    }
}

