@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject ICartService CartService
@implements IDisposable

<form>
    <div class="relative flex items-center">
        <button type="button" id="decrement-button" data-input-counter-decrement="counter-input"
            @onclick="() => DecreaseQuantity()"
            class="flex-shrink-0 -bg--bg-black2 dark:-bg--bg-black2 dark:hover:bg-gray-600 dark:border-gray-600 hover:-bg--bg-black2 inline-flex items-center justify-center border border-gray-300 rounded-[0.3rem] h-4 w-4 focus:ring-gray-100 dark:focus:ring-gray-700 focus:ring-2 focus:outline-none">
            <svg class="w-1.5 h-1.5 text-gray-900 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
                fill="none" viewBox="0 0 18 2">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M1 1h16" />
            </svg>
        </button>
        <input type="text" id="counter-input"
            class="flex-shrink-0 border-0 text-[0.6rem] font-normal focus:outline-none focus:ring-0 max-w-[1.2rem] text-center -bg--bg-black2"
            placeholder="" @bind-value="Item.Quantity" readonly />
        <button type="button" id="increment-button" data-input-counter-increment="counter-input"
            @onclick="() => IncreaseQuantity()"
            class="flex-shrink-0 -bg--bg-black2 dark:-bg--bg-black2 dark:hover:bg-gray-600 dark:border-gray-600 hover:bg-gray-200 inline-flex items-center justify-center border border-gray-300 rounded-[0.3rem] h-4 w-4 focus:ring-gray-100 dark:focus:ring-gray-700 focus:ring-2 focus:outline-none">
            <svg class="w-1.5 h-1.5 text-gray-900 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
                fill="none" viewBox="0 0 18 18">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M9 1v16M1 9h16" />
            </svg>
        </button>
    </div>
</form>


@code {

    [Parameter] public Item Item { get; set; }

    [Parameter] public EventCallback<Item> OnQuantityChanged { get; set; }

    private bool CanDecrease => Item.Quantity > 0;

    protected override async Task OnParametersSetAsync()
    {
        var cartItems = await localStorage.GetItemAsync<IEnumerable<Item>>("cart");
        var cartItem = cartItems?.FirstOrDefault(x => x.Id == Item.Id);
        if (cartItem != null)
        {
            Item.Quantity = cartItem.Quantity;
        }
    }

    protected override void OnInitialized()
    {
        CartService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        CartService.OnChange -= StateHasChanged;
    }

    private async Task IncreaseQuantity()
    {
        Item.Quantity++;
        await CartService.AddItemToCartAsync(Item);
        await OnQuantityChanged.InvokeAsync(Item);
    }

    private async Task DecreaseQuantity()
    {
        if (CanDecrease)
        {
            Item.Quantity--;
            await CartService.RemoveCartItemAsync(Item);
            await OnQuantityChanged.InvokeAsync(Item);
        }
    }
}