// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using POS.Infrastructure.DAL;

#nullable disable

namespace POS.Infrastructure.DAL.Migrations
{
    [DbContext(typeof(POSDbContext))]
    partial class POSDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("POS.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("POS.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("POS.Domain.Entities.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EffectiveTo")
                        .HasColumnType("TEXT");

                    b.Property<bool>("InclusiveOfTax")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRequiredMember")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Discounts", (string)null);
                });

            modelBuilder.Entity("POS.Domain.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActived")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequiresMember")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaxId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Vendor")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TaxId");

                    b.ToTable("Items", (string)null);
                });

            modelBuilder.Entity("POS.Domain.Entities.SaleLineItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ActualUnitPrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("BeforeDiscountUnitPrice")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ExtendedPrice")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsMemberBenefit")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("RegularUnitPrice")
                        .HasColumnType("TEXT");

                    b.Property<long?>("SaleTransactionId")
                        .HasColumnType("INTEGER");

                    b.Property<short>("SequenceNumber")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("TEXT");

                    b.Property<int>("TaxId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TransactionId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SaleTransactionId");

                    b.HasIndex("TaxId");

                    b.ToTable("SaleLineItems", (string)null);
                });

            modelBuilder.Entity("POS.Domain.Entities.SaleTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRefund")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVoided")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("SerialNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TransactionNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WorkstationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("SaleTransactions", (string)null);
                });

            modelBuilder.Entity("POS.Domain.Entities.Tax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Taxes");
                });

            modelBuilder.Entity("POS.Domain.Entities.TaxLineItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsVoid")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("SaleTransactionId")
                        .HasColumnType("INTEGER");

                    b.Property<short>("SequenceNumber")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("TEXT");

                    b.Property<long>("TaxId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TaxId1")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TaxableAmount")
                        .HasColumnType("TEXT");

                    b.Property<long>("TransactionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SaleTransactionId");

                    b.HasIndex("TaxId1");

                    b.ToTable("TaxLineItems", (string)null);
                });

            modelBuilder.Entity("POS.Domain.Entities.Tender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Tenders", (string)null);
                });

            modelBuilder.Entity("POS.Domain.Entities.TenderLineItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsVoid")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("SaleTransactionId")
                        .HasColumnType("INTEGER");

                    b.Property<short>("SequenceNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TenderType")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TransactionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SaleTransactionId");

                    b.ToTable("TenderLineItems", (string)null);
                });

            modelBuilder.Entity("POS.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("POS.Domain.Entities.Item", b =>
                {
                    b.HasOne("POS.Domain.Entities.Category", null)
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("POS.Domain.Entities.Tax", "Tax")
                        .WithMany("Items")
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("POS.Domain.Entities.SaleLineItem", b =>
                {
                    b.HasOne("POS.Domain.Entities.SaleTransaction", "SaleTransaction")
                        .WithMany("SaleLineItems")
                        .HasForeignKey("SaleTransactionId");

                    b.HasOne("POS.Domain.Entities.Tax", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SaleTransaction");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("POS.Domain.Entities.TaxLineItem", b =>
                {
                    b.HasOne("POS.Domain.Entities.SaleTransaction", "SaleTransaction")
                        .WithMany("TaxLineItems")
                        .HasForeignKey("SaleTransactionId");

                    b.HasOne("POS.Domain.Entities.Tax", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId1");

                    b.Navigation("SaleTransaction");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("POS.Domain.Entities.TenderLineItem", b =>
                {
                    b.HasOne("POS.Domain.Entities.SaleTransaction", null)
                        .WithMany("TenderLineItems")
                        .HasForeignKey("SaleTransactionId");
                });

            modelBuilder.Entity("POS.Domain.Entities.Category", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("POS.Domain.Entities.SaleTransaction", b =>
                {
                    b.Navigation("SaleLineItems");

                    b.Navigation("TaxLineItems");

                    b.Navigation("TenderLineItems");
                });

            modelBuilder.Entity("POS.Domain.Entities.Tax", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
